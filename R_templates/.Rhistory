rows = 7
columns = 7
set.seed(12345) #para aleatoriedad
perm = sample(0:(rows*columns-1)) #permutacion aleatoria inicial (matriz de 7 filas 7 columnas)
state.initial = matrix(perm,nrow=rows,byrow = TRUE)
state.final   = matrix(0:(rows*columns-1),nrow=rows,byrow = TRUE)
actions.possible = data.frame(action=c("Arriba","Abajo","Izquierda","Derecha"),cost=1)
initialize.problem = function(rows=7, columns=7, perm = sample(0:(rows*columns-1))){
problem = list()
problem$state.initial = matrix(perm,nrow=rows,byrow = TRUE)
problem$state.final   = matrix(0:(rows*columns-1),nrow=rows,byrow = TRUE)
problem$actions.possible = data.frame(action=c("Arriba","Abajo","Izquierda","Derecha"),cost=1)
problem$rows = rows
problem$columns = columns
problem$name = paste0("Problema de los zapatos (",rows,"x",columns,") - [",paste0(perm,collapse="-"),"]")
return(problem)
}
View(actions.possible)
View(state.final)
rows = 7
columns = 7
set.seed(2) #para aleatoriedad
perm = sample(0:(rows*columns-1)) #permutacion aleatoria inicial (matriz de 7 filas 7 columnas)
state.initial = matrix(perm,nrow=rows,byrow = TRUE)
state.final   = matrix(0:(rows*columns-1),nrow=rows,byrow = TRUE)
actions.possible = data.frame(action=c("Arriba","Abajo","Izquierda","Derecha"),cost=1)
initialize.problem = function(rows=7, columns=7, perm = sample(0:(rows*columns-1))){
problem = list()
problem$state.initial = matrix(perm,nrow=rows,byrow = TRUE)
problem$state.final   = matrix(0:(rows*columns-1),nrow=rows,byrow = TRUE)
problem$actions.possible = data.frame(action=c("Arriba","Abajo","Izquierda","Derecha"),cost=1)
problem$rows = rows
problem$columns = columns
problem$name = paste0("Problema de los zapatos (",rows,"x",columns,") - [",paste0(perm,collapse="-"),"]")
return(problem)
}
# =======================================================================
# Must return TRUE or FALSE according with if the action can be done or not
# over the specific state
is.applicable = function (state, action, problem){
...
return(...)
}
View(state.final)
rows = 7
rows = 7
columns = 7
#set.seed(2) #para aleatoriedad
perm = sample(0:(rows*columns-1)) #permutacion aleatoria inicial (matriz de 7 filas 7 columnas)
state.initial = matrix(perm,nrow=rows,byrow = TRUE)
state.final   = matrix(0:(rows*columns-1),nrow=rows,byrow = TRUE)
actions.possible = data.frame(action=c("Arriba","Abajo","Izquierda","Derecha"),cost=1)
initialize.problem = function(rows=7, columns=7, perm = sample(0:(rows*columns-1))){
problem = list()
problem$state.initial = matrix(perm,nrow=rows,byrow = TRUE)
problem$state.final   = matrix(0:(rows*columns-1),nrow=rows,byrow = TRUE)
problem$actions.possible = data.frame(action=c("Arriba","Abajo","Izquierda","Derecha"),cost=1)
problem$rows = rows
problem$columns = columns
problem$name = paste0("Problema de los zapatos (",rows,"x",columns,") - [",paste0(perm,collapse="-"),"]")
return(problem)
}
View(state.final)
View(state.initial)
rows = 7
columns = 7
set.seed(2) #para aleatoriedad
perm = sample(0:(rows*columns-1)) #permutacion aleatoria inicial (matriz de 7 filas 7 columnas)
perm (2,2,2:4)
perm = sample(1,7:7) #permutacion aleatoria inicial (matriz de 7 filas 7 columnas)
rows = 7
columns = 7
set.seed(2) #para aleatoriedad
perm = sample(1,7:7,TRUE) #permutacion aleatoria inicial (matriz de 7 filas 7 columnas)
state.initial = matrix(perm,nrow=rows,byrow = TRUE)
state.final   = matrix(0:(rows*columns-1),nrow=rows,byrow = TRUE)
actions.possible = data.frame(action=c("Arriba","Abajo","Izquierda","Derecha"),cost=1)
View(state.final)
View(state.initial)
View(state.initial)
View(state.initial)
View(state.final)
state.final   = matrix(1:(rows*columns-1),nrow=rows,byrow = TRUE)
#---------------------------------------------------------------------------
# PART 2: Definition of initial and final state, and list of actions
#---------------------------------------------------------------------------
# We will use the sample function, in order to generate a random permutation
# then, we will build a rows-by-columns matrix
rows = 3
columns = 3
set.seed(1234)
perm = sample(0:(rows*columns-1)) #permutacion aleatoria inicial (matriz de 3 filas 3 columnas)
state.initial = matrix(perm,nrow=rows,byrow = TRUE)
state.final   = matrix(1:(rows*columns-1),nrow=rows,byrow = TRUE)
rows = 7
columns = 7
set.seed(2) #para aleatoriedad
perm = sample(1,7:7,TRUE) #permutacion aleatoria inicial (matriz de 7 filas 7 columnas)
state.initial = matrix(perm,nrow=rows,byrow = TRUE)
state.final   = matrix(1:(rows*columns-1),nrow=rows,byrow = TRUE)
View(state.final)
View(state.initial)
rows = 7
columns = 7
set.seed(2) #para aleatoriedad
perm = sample(1:7,7:7,TRUE) #permutacion aleatoria inicial (matriz de 7 filas 7 columnas)
state.initial = matrix(perm,nrow=rows,byrow = TRUE)
state.final   = matrix(1:(rows*columns-1),nrow=rows,byrow = TRUE)
state.initial = matrix(perm,nrow=rows,byrow = TRUE)
rows = 7
columns = 7
set.seed(2) #para aleatoriedad
perm = sample(1:7,7:7,TRUE) #permutacion aleatoria inicial (matriz de 7 filas 7 columnas)
state.initial = matrix(perm,nrow=rows,byrow = TRUE)
state.final   = matrix(0:(rows*columns-1),nrow=rows,byrow = TRUE)
View(state.initial)
perm = sample(1:7,7:7,FALSE) #permutacion aleatoria inicial (matriz de 7 filas 7 columnas)
rows = 7
columns = 7
set.seed(2) #para aleatoriedad
perm = sample(1:7,7:7,FALSE) #permutacion aleatoria inicial (matriz de 7 filas 7 columnas)
state.initial = matrix(perm,nrow=rows,byrow = TRUE)
state.final   = matrix(0:(rows*columns-1),nrow=rows,byrow = TRUE)
View(state.initial)
perm = sample(0:(rows*columns-1)) #nose cmo hacer para que la permutacion sea de ceros y unos
state.initial = matrix(perm,nrow=rows,byrow = TRUE)
state.final   = matrix(0:(rows*columns-1),nrow=rows,byrow = TRUE)
actions.possible = data.frame(action=c("Arriba","Abajo","Izquierda","Derecha"),cost=1)
initialize.problem = function(rows=7, columns=7, perm = sample(0:(rows*columns-1))){
problem = list()
problem$state.initial = matrix(perm,nrow=rows,byrow = TRUE)
problem$state.final   = matrix(0:(rows*columns-1),nrow=rows,byrow = TRUE)
problem$actions.possible = data.frame(action=c("Arriba","Abajo","Izquierda","Derecha"),cost=1)
problem$rows = rows
problem$columns = columns
problem$name = paste0("Problema de los zapatos (",rows,"x",columns,") - [",paste0(perm,collapse="-"),"]")
return(problem)
}
View(actions.possible)
View(state.final)
View(state.initial)
View(actions.possible)
View(state.final)
rows = 7
columns = 7
set.seed(1) #para aleatoriedad
perm = sample(0:(rows*columns-1)) #nose cmo hacer para que la permutacion sea de ceros y unos
state.initial = matrix(perm,nrow=rows,byrow = TRUE)
state.final   = matrix(0:(rows*columns-1),nrow=rows,byrow = TRUE)
View(state.final)
View(state.initial)
chooseMatrix(5,2)
install.packages("perm")
chooseMatrix(5,2)
# =======================================================================
# This function must return a list with the information needed to
# solve the problem.
# (Depending on the problem, it should receive or not parameters)
install.packages("perm")
# =======================================================================
# This function must return a list with the information needed to
# solve the problem.
# (Depending on the problem, it should receive or not parameters)
install.packages("perm")
rows = 7
columns = 7
set.seed(22) #para aleatoriedad
perm = sample(0:(rows*columns-1)) #nose cmo hacer para que la permutacion sea de ceros y unos
state.initial = matrix(perm,nrow=rows,byrow = TRUE)
state.final   = matrix(0:(rows*columns-1),nrow=rows,byrow = TRUE)
actions.possible = data.frame(action=c("Arriba","Abajo","Izquierda","Derecha"),cost=1)
initialize.problem = function(rows=7, columns=7, perm = sample(0:(rows*columns-1))){
problem = list()
problem$state.initial = matrix(perm,nrow=rows,byrow = TRUE)
problem$state.final   = matrix(0:(rows*columns-1),nrow=rows,byrow = TRUE)
problem$actions.possible = data.frame(action=c("Arriba","Abajo","Izquierda","Derecha"),cost=1)
problem$rows = rows
problem$columns = columns
problem$name = paste0("Problema de los zapatos (",rows,"x",columns,") - [",paste0(perm,collapse="-"),"]")
return(problem)
}
problem = initialize.problem() # esto habra que hacer en la practica
problem
# =======================================================================
# This function must return a list with the information needed to
# solve the problem.
# (Depending on the problem, it should receive or not parameters)
install.packages("perm")
rows = 7
columns = 7
set.seed(123) #para aleatoriedad
perm = sample(0:(rows*columns-1)) #nose cmo hacer para que la permutacion sea de ceros y unos
state.initial = matrix(perm,nrow=rows,byrow = TRUE)
state.final   = matrix(0:(rows*columns-1),nrow=rows,byrow = TRUE)
actions.possible = data.frame(action=c("Arriba","Abajo","Izquierda","Derecha"),cost=1)
initialize.problem = function(rows=7, columns=7, perm = sample(0:(rows*columns-1))){
problem = list()
problem$state.initial = matrix(perm,nrow=rows,byrow = TRUE)
problem$state.final   = matrix(0:(rows*columns-1),nrow=rows,byrow = TRUE)
problem$actions.possible = data.frame(action=c("Arriba","Abajo","Izquierda","Derecha"),cost=1)
problem$rows = rows
problem$columns = columns
problem$name = paste0("Problema de los zapatos (",rows,"x",columns,") - [",paste0(perm,collapse="-"),"]")
return(problem)
}
problem = initialize.problem() # esto habra que hacer en la practica
problem
# LIBRARIES (add any needed library here)
library(rstudioapi)
library(ggplot2)
library(gridExtra)
library(perm)
install.packages("perm")
install.packages("perm")
