set.seed(123) #para aleatoriedad
perm = sample(0:(rows*columns-1)) #nose cmo hacer para que la permutacion sea de ceros y unos
state.initial = matrix(perm,nrow=rows,byrow = TRUE)
state.final   = matrix(0:(rows*columns-1),nrow=rows,byrow = TRUE)
actions.possible = data.frame(action=c("Arriba","Abajo","Izquierda","Derecha"),cost=1)
initialize.problem = function(rows=7, columns=7, perm = sample(0:(rows*columns-1))){
problem = list()
problem$state.initial = matrix(perm,nrow=rows,byrow = TRUE)
problem$state.final   = matrix(0:(rows*columns-1),nrow=rows,byrow = TRUE)
problem$actions.possible = data.frame(action=c("Arriba","Abajo","Izquierda","Derecha"),cost=1)
problem$rows = rows
problem$columns = columns
problem$name = paste0("Problema de los zapatos (",rows,"x",columns,") - [",paste0(perm,collapse="-"),"]")
return(problem)
}
problem = initialize.problem() # esto habra que hacer en la practica
problem
# LIBRARIES (add any needed library here)
library(rstudioapi)
library(ggplot2)
library(gridExtra)
library(perm)
install.packages("perm")
install.packages("perm")
rows = 7
columns = 7
set.seed(123) #para aleatoriedad
perm = sample(0:(rows*columns-1)) #nose cmo hacer para que la permutacion sea de ceros y unos
state.initial = matrix(sample(0:1, rows*columns,replace=TRUE),rows,columns)
#state.final   = matrix(sample(0:1,rows*columns,replace=TRUE),rows,columns)
actions.possible = data.frame(action=c("Arriba","Abajo","Izquierda","Derecha"),cost=1)
initialize.problem = function(rows=7, columns=7, perm = sample(0:(rows*columns-1))){
problem = list()
problem$state.initial = matrix(perm,nrow=rows,byrow = TRUE)
problem$state.final   = matrix(0:(rows*columns-1),nrow=rows,byrow = TRUE)
problem$actions.possible = data.frame(action=c("Arriba","Abajo","Izquierda","Derecha"),cost=1)
problem$rows = rows
problem$columns = columns
problem$name = paste0("Problema de los zapatos (",rows,"x",columns,") - [",paste0(perm,collapse="-"),"]")
return(problem)
}
View(state.initial)
# Configuring the Environment
rm(list=ls())
cat("\014")
graphics.off()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
dir()
# LIBRARIES (add any needed library here)
library(rstudioapi)
library(ggplot2)
library(gridExtra)
# ADDITIONAL FUNCTIONS (add any used method here)
source("[TEMPLATE].problem-interface-XX.R")
source("R_library/v1/Analyze.Results.R")
source("R_library/v1/Plot.Results.R")
source("R_library/v1/Breadth.First.Search.TS.R")
source("R_library/v1/Uniform.Cost-TS.R")
source("R_library/v1/A.Star.R")
# =======================================================================
# Check the proper operation of implemented function here!
MyData <- read.csv(file="datos.csv", header=TRUE, sep=";")
a<-MyData[,"Tablero"]
initialize.problem = function(lista=c(0,0,1,0,1,0,1,0,0),rows = 3,columns = 3,dfcomb=NULL){
problem = list()
problem$mapa=  matrix(lista,rows,columns)
problem$rows=rows
problem$columns=columns
problem$muros=dfcomb
problem$state.initial = c(rows,1) #estado inicial
problem$state.final   = c(1,columns) #estado final
problem$actions.possible=data.frame(action=c("Up","Down","Left","Right"),cost=1)
# problem$name = <Insert code here>
# problem$<aditional info> = <Insert code here>
return(problem)
}
# =======================================================================
# Must return TRUE or FALSE according with if the action can be done or not
# over the specific state
is.applicable = function (state, action, problem){
#estado fila
row=state[1]
#estado columna
col=state[2]
action = action$action
#subset nos permite seleccionar lo que queremos del dataframe; en este caso muro, fila y columna
d<-subset(problem$muros,x==row & y==col)
#caso de ir arriba
if (action == "Up"){
if(row!=1){# si fila distinto de 1
if(problem$mapa[row-1,col]!=problem$mapa[row,col])
{
if(d[,"Up"]==0)
{
result=TRUE
}
else{
result=FALSE
}
}
else{
result=FALSE
}
}
else{
result = FALSE
}
}
#caso de ir abajo
if (action == "Down"){
if(row!=problem$rows){
if(problem$mapa[row+1,col]!=problem$mapa[row,col])
{
if(d[,"Down"]==0)
{
result=TRUE
}
else{
result=FALSE
}
}
else{
result=FALSE
}
}
else{
result = FALSE
}
}
...
return(...)
}
# =======================================================================
# Must return the state resulting on applying the action over the state
effect = function (state, action){
action<-action$action
ubicacion<- which(state==0, indice=TRUE)
row <- ubicacion[1]
col <- ubicacion[2]
result <- state
if (action == "Up") {
result[1]<-result[1]-1
}
if (action == "Down") {
result[1]<-result[1]+1
}
if (action == "Left") {
result[2]<-result[2]-1
}
if (action == "Right") {
result[2]<-result[2]+1
}
return(result)
}
# =======================================================================
# Must return TRUE or FALSE according with the state is final or not
# * In case the final state is stablished by a condition, second argument
#   could be omited
is.final.state = function (state, finalstate){
return(identical(state,finalstate))
}
# =======================================================================
# Must print the state in console (in a legible way)
to.string = function (state){
print(state)
}
# =======================================================================
# Return the cost of applying an action over a state
get.cost = function (action,state){
return(action$cost)
}
# =======================================================================
# (Used for Informed Algorithms)
# Heuristic function used in Informed algorithms
get.evaluation = function(state,problem){
print(sqrt((state[1]-problem$state.final[1])^2+(state[2]-problem$state.final[2])^2))
return(sqrt((state[1]-problem$state.final[1])^2+(state[2]-problem$state.final[2])^2))
}
# LIBRARIES (add any needed library here)
library(rstudioapi)
library(ggplot2)
library(gridExtra)
# ADDITIONAL FUNCTIONS (add any used method here)
source("[TEMPLATE].problem-interface-XX.R")
source("R_library/v1/Analyze.Results.R")
source("R_library/v1/Plot.Results.R")
source("R_library/v1/Breadth.First.Search.TS.R")
source("R_library/v1/Uniform.Cost-TS.R")
source("R_library/v1/A.Star.R")
# =======================================================================
# Check the proper operation of implemented function here!
MyData <- read.csv(file="datos.csv", header=TRUE, sep=";")
a<-MyData[,"Tablero"]
#Solo si es cuadrado
rows = sqrt(length(a))
columns = sqrt(length(a))
A=matrix(a,rows,columns)
print(A)
a<-c(0,0,0,0,0,1,0,1,0)
A=matrix(a,rows,columns)
print(A)
a<-c(0,0,0,0,0,1,0,1,0)
A=matrix(a,rows,columns)
initialize.problem = function(lista=c(0,0,1,0,1,0,1,0,0),rows = 3,columns = 3,dfcomb=NULL){
problem = list()
problem$mapa=  matrix(lista,rows,columns)
problem$rows=rows
problem$columns=columns
problem$muros=dfcomb
problem$state.initial = c(rows,1) #estado inicial
problem$state.final   = c(1,columns) #estado final
problem$actions.possible=data.frame(action=c("Up","Down","Left","Right"),cost=1)
# problem$name = <Insert code here>
# problem$<aditional info> = <Insert code here>
return(problem)
}
# =======================================================================
# Must return TRUE or FALSE according with if the action can be done or not
# over the specific state
is.applicable = function (state, action, problem){
#estado fila
row=state[1]
#estado columna
col=state[2]
action = action$action
#subset nos permite seleccionar lo que queremos del dataframe; en este caso muro, fila y columna
d<-subset(problem$muros,x==row & y==col)
#caso de ir arriba
if (action == "Up"){
if(row!=1){# si fila distinto de 1
if(problem$mapa[row-1,col]!=problem$mapa[row,col])
{
if(d[,"Up"]==0)
{
result=TRUE
}
else{
result=FALSE
}
}
else{
result=FALSE
}
}
else{
result = FALSE
}
}
#caso de ir abajo
if (action == "Down"){
if(row!=problem$rows){
if(problem$mapa[row+1,col]!=problem$mapa[row,col])
{
if(d[,"Down"]==0)
{
result=TRUE
}
else{
result=FALSE
}
}
else{
result=FALSE
}
}
else{
result = FALSE
}
}
...
return(...)
}
# =======================================================================
# Must return the state resulting on applying the action over the state
effect = function (state, action){
action<-action$action
ubicacion<- which(state==0, indice=TRUE)
row <- ubicacion[1]
col <- ubicacion[2]
result <- state
if (action == "Up") {
result[1]<-result[1]-1
}
if (action == "Down") {
result[1]<-result[1]+1
}
if (action == "Left") {
result[2]<-result[2]-1
}
if (action == "Right") {
result[2]<-result[2]+1
}
return(result)
}
# =======================================================================
# Must return TRUE or FALSE according with the state is final or not
# * In case the final state is stablished by a condition, second argument
#   could be omited
is.final.state = function (state, finalstate){
return(identical(state,finalstate))
}
# =======================================================================
# Must print the state in console (in a legible way)
to.string = function (state){
print(state)
}
# =======================================================================
# Return the cost of applying an action over a state
get.cost = function (action,state){
return(action$cost)
}
# =======================================================================
# (Used for Informed Algorithms)
# Heuristic function used in Informed algorithms
get.evaluation = function(state,problem){
print(sqrt((state[1]-problem$state.final[1])^2+(state[2]-problem$state.final[2])^2))
return(sqrt((state[1]-problem$state.final[1])^2+(state[2]-problem$state.final[2])^2))
}
# Configuring the Environment
rm(list=ls())
cat("\014")
graphics.off()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
dir()
# LIBRARIES (add any needed library here)
library(rstudioapi)
library(ggplot2)
library(gridExtra)
# ADDITIONAL FUNCTIONS (add any used method here)
source("[TEMPLATE].problem-interface-XX.R")
source("R_library/v1/Analyze.Results.R")
source("R_library/v1/Plot.Results.R")
source("R_library/v1/Breadth.First.Search.TS.R")
source("R_library/v1/Uniform.Cost-TS.R")
source("R_library/v1/A.Star.R")
# =======================================================================
# Check the proper operation of implemented function here!
MyData <- read.csv(file="datos.csv", header=TRUE, sep=";")
a<-MyData[,"Tablero"]
initialize.problem = function(lista=c(0,0,1,0,1,0,1,0,0),rows = 3,columns = 3,dfcomb=NULL){
problem = list()
problem$mapa=  matrix(lista,rows,columns)
problem$rows=rows
problem$columns=columns
problem$muros=dfcomb
problem$state.initial = c(rows,1) #estado inicial
problem$state.final   = c(1,columns) #estado final
problem$actions.possible=data.frame(action=c("Up","Down","Left","Right"),cost=1)
# problem$name = <Insert code here>
# problem$<aditional info> = <Insert code here>
return(problem)
}
# =======================================================================
# Must return TRUE or FALSE according with if the action can be done or not
# over the specific state
is.applicable = function (state, action, problem){
#estado fila
row=state[1]
#estado columna
col=state[2]
action = action$action
#subset nos permite seleccionar lo que queremos del dataframe; en este caso muro, fila y columna
d<-subset(problem$muros,x==row & y==col)
#caso de ir arriba
if (action == "Up"){
if(row!=1){# si fila distinto de 1
if(problem$mapa[row-1,col]!=problem$mapa[row,col])
{
if(d[,"Up"]==0)
{
result=TRUE
}
else{
result=FALSE
}
}
else{
result=FALSE
}
}
else{
result = FALSE
}
}
#caso de ir abajo
if (action == "Down"){
if(row!=problem$rows){
if(problem$mapa[row+1,col]!=problem$mapa[row,col])
{
if(d[,"Down"]==0)
{
result=TRUE
}
else{
result=FALSE
}
}
else{
result=FALSE
}
}
else{
result = FALSE
}
}
...
return(...)
}
# =======================================================================
# Must return the state resulting on applying the action over the state
effect = function (state, action){
action<-action$action
ubicacion<- which(state==0, indice=TRUE)
row <- ubicacion[1]
col <- ubicacion[2]
result <- state
if (action == "Up") {
result[1]<-result[1]-1
}
if (action == "Down") {
result[1]<-result[1]+1
}
if (action == "Left") {
result[2]<-result[2]-1
}
if (action == "Right") {
result[2]<-result[2]+1
}
return(result)
}
# =======================================================================
# Must return TRUE or FALSE according with the state is final or not
# * In case the final state is stablished by a condition, second argument
#   could be omited
is.final.state = function (state, finalstate){
return(identical(state,finalstate))
}
# =======================================================================
# Must print the state in console (in a legible way)
to.string = function (state){
print(state)
}
# =======================================================================
# Return the cost of applying an action over a state
get.cost = function (action,state){
return(action$cost)
}
# =======================================================================
# (Used for Informed Algorithms)
# Heuristic function used in Informed algorithms
get.evaluation = function(state,problem){
print(sqrt((state[1]-problem$state.final[1])^2+(state[2]-problem$state.final[2])^2))
return(sqrt((state[1]-problem$state.final[1])^2+(state[2]-problem$state.final[2])^2))
}
# Configuring the Environment
rm(list=ls())
cat("\014")
graphics.off()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
dir()
# LIBRARIES (add any needed library here)
library(rstudioapi)
library(ggplot2)
library(gridExtra)
# ADDITIONAL FUNCTIONS (add any used method here)
source("[TEMPLATE].problem-interface-XX.R")
source("R_library/v1/Analyze.Results.R")
source("R_library/v1/Plot.Results.R")
source("R_library/v1/Breadth.First.Search.TS.R")
source("R_library/v1/Uniform.Cost-TS.R")
source("R_library/v1/A.Star.R")
# =======================================================================
# Check the proper operation of implemented function here!
MyData <- read.csv(file="datos.csv", header=TRUE, sep=";")
a<-MyData[,"Tablero"]
#Solo si es cuadrado
rows = sqrt(length(a))
# =======================================================================
# Check the proper operation of implemented function here!
MyData <- read.csv(file="datos.xlsx", header=TRUE, sep=";")
View(MyData)
# =======================================================================
# Check the proper operation of implemented function here!
MyData <- read.csv(file="datos.csv", header=TRUE, sep=";")
a<-MyData[,"Tablero"]
#Solo si es cuadrado
rows = sqrt(length(a))
columns = sqrt(length(a))
A=matrix(a,rows,columns)
print(A)
a<-c(0,0,0,0,0,1,0,1,0)
A=matrix(a,rows,columns)
print(A)
rows=3
columns=3
MyData$Tablero<-NULL
colnames(MyData)[1] <- "x"
# =======================================================================
# Solving of the problem (you have to adapt it)
source("[TEMPLATE].problem-interface-XX.R")
source("R_library/v1/A.Star.R")
problem   = initialize.problem(a,rows,columns,MyData)
limit = 10000
bfs=Breadth.First.Search(problem,limit)
bfs = A.star(problem,limit)
res1 = method.XXXX(problem,"<OTHER_PARAMETERS>")
res2 = method.YYYY(problem,"<OTHER_PARAMETERS>")
all = list(res1, res2)
analyze.results(list(res1,res2),problem)
